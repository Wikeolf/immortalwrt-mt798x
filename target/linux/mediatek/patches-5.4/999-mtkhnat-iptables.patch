--- a/include/net/netfilter/nf_conntrack_acct.h
+++ b/include/net/netfilter/nf_conntrack_acct.h
@@ -14,6 +14,8 @@
 struct nf_conn_counter {
 	atomic64_t packets;
 	atomic64_t bytes;
+	atomic64_t diff_packets;
+	atomic64_t diff_bytes;
 };
 
 struct nf_conn_acct {

--- a/net/ipv4/netfilter/ip_tables.c
+++ b/net/ipv4/netfilter/ip_tables.c
@@ -27,6 +27,8 @@
 #include <linux/netfilter_ipv4/ip_tables.h>
 #include <net/netfilter/nf_log.h>
 #include "../../netfilter/xt_repldata.h"
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_acct.h>
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Netfilter Core Team <coreteam@netfilter.org>");
@@ -273,6 +275,26 @@ ipt_handle_default_rule(struct ipt_entry
 	return true;
 }
 
+static struct hnat_desc {
+	u32 entry : 14;
+	#if defined(CONFIG_MEDIATEK_NETSYS_RX_V2)
+	u32 fill : 4;
+	#endif
+	u32 crsn : 5;
+	u32 sport : 4;
+	u32 alg : 1;
+	u32 iface : 8;
+	u32 ppe : 1;
+	u32 filled : 3;
+	u32 magic_tag_protect : 16;
+	u32 wdmaid : 8;
+	u32 rxid : 2;
+	u32 wcid : 10;
+	u32 bssid : 6;
+} __packed;
+#define HIT_BIND_KEEPALIVE_DUP_OLD_HDR 0x15
+#define skb_hnat_reason(skb) (((struct hnat_desc *)(skb->head))->crsn)
+
 /* Returns one of the generic firewall policies, like NF_ACCEPT. */
 unsigned int
 ipt_do_table(struct sk_buff *skb,
@@ -292,6 +314,11 @@ ipt_do_table(struct sk_buff *skb,
 	struct xt_action_param acpar;
 	unsigned int addend;
 
+	struct nf_conn *ct;
+	struct nf_conn_acct *acct;
+	struct nf_conn_counter *conn_counter;
+	enum ip_conntrack_info ctinfo;
+
 	/* Initialization */
 	WARN_ON(!(table->valid_hooks & (1 << hook)));
 	local_bh_disable();
@@ -305,6 +332,19 @@ ipt_do_table(struct sk_buff *skb,
 
 		counter = xt_get_this_cpu_counter(&e->counters);
 		ADD_COUNTER(*counter, skb->len, 1);
+		
+		if (unlikely(skb_hnat_reason(skb) == HIT_BIND_KEEPALIVE_DUP_OLD_HDR)){
+		ct = nf_ct_get(skb, &ctinfo);
+		if (ct) {
+			acct = nf_conn_acct_find(ct);
+			if (acct) {
+			conn_counter = acct->counter;			
+			ADD_COUNTER(*counter, 		   	    
+ atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_bytes),atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_packets));
+				  }
+			}
+		}
+
 		local_bh_enable();
 		return verdict;
 	}
@@ -361,6 +401,18 @@ ipt_do_table(struct sk_buff *skb,
 		counter = xt_get_this_cpu_counter(&e->counters);
 		ADD_COUNTER(*counter, skb->len, 1);
 
+		if (unlikely(skb_hnat_reason(skb) == HIT_BIND_KEEPALIVE_DUP_OLD_HDR)){
+		ct = nf_ct_get(skb, &ctinfo);
+		if (ct) {
+			acct = nf_conn_acct_find(ct);
+			if (acct) {
+			conn_counter = acct->counter;			
+			ADD_COUNTER(*counter, 		   	    
+ atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_bytes),atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_packets));
+				  }
+			}
+		}
+
 		t = ipt_get_target_c(e);
 		WARN_ON(!t->u.kernel.target);
 
--- a/net/ipv6/netfilter/ip6_tables.c
+++ b/net/ipv6/netfilter/ip6_tables.c
@@ -31,6 +31,8 @@
 #include <linux/netfilter/x_tables.h>
 #include <net/netfilter/nf_log.h>
 #include "../../netfilter/xt_repldata.h"
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_acct.h>
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Netfilter Core Team <coreteam@netfilter.org>");
@@ -245,6 +247,26 @@ ip6t_next_entry(const struct ip6t_entry
 	return (void *)entry + entry->next_offset;
 }
 
+static struct hnat_desc {
+	u32 entry : 14;
+	#if defined(CONFIG_MEDIATEK_NETSYS_RX_V2)
+	u32 fill : 4;
+	#endif
+	u32 crsn : 5;
+	u32 sport : 4;
+	u32 alg : 1;
+	u32 iface : 8;
+	u32 ppe : 1;
+	u32 filled : 3;
+	u32 magic_tag_protect : 16;
+	u32 wdmaid : 8;
+	u32 rxid : 2;
+	u32 wcid : 10;
+	u32 bssid : 6;
+} __packed;
+#define HIT_BIND_KEEPALIVE_DUP_OLD_HDR 0x15
+#define skb_hnat_reason(skb) (((struct hnat_desc *)(skb->head))->crsn)
+
 /* Returns one of the generic firewall policies, like NF_ACCEPT. */
 unsigned int
 ip6t_do_table(struct sk_buff *skb,
@@ -263,6 +285,11 @@ ip6t_do_table(struct sk_buff *skb,
 	struct xt_action_param acpar;
 	unsigned int addend;
 
+	struct nf_conn *ct;
+	struct nf_conn_acct *acct;
+	struct nf_conn_counter *conn_counter;
+	enum ip_conntrack_info ctinfo;
+
 	/* Initialization */
 	stackidx = 0;
 	indev = state->in ? state->in->name : nulldevname;
@@ -322,6 +349,18 @@ ip6t_do_table(struct sk_buff *skb,
 		counter = xt_get_this_cpu_counter(&e->counters);
 		ADD_COUNTER(*counter, skb->len, 1);
 
+		if (unlikely(skb_hnat_reason(skb) == HIT_BIND_KEEPALIVE_DUP_OLD_HDR)){
+		ct = nf_ct_get(skb, &ctinfo);
+		if (ct) {
+			acct = nf_conn_acct_find(ct);
+			if (acct) {
+			conn_counter = acct->counter;
+			ADD_COUNTER(*counter,
+ atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_bytes),atomic64_read(&conn_counter[CTINFO2DIR(ctinfo)].diff_packets));
+				  }
+			}
+		}
+
 		t = ip6t_get_target_c(e);
 		WARN_ON(!t->u.kernel.target);
 
